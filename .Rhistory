target='rules'))
inspect(rules)
summary(retail)
rm(list=ls())
retail = read.csv('Online_Retail.csv',
sep=',',
na.strings=c('', 'N/A'),
stringsAsFactors=FALSE)
summary(retail)
retail.top3 <- head(retail, 3)
retail$CustomerID <- na.locf(retail$CustomerID)
retail <- retail[!duplicated(retail), ]
retail <- retail[retail$Quantity > 0, ]
retail <- retail[retail$UnitPrice > 0, ]
boxplot(retail$Quantity, main = "Boxplot Quantity", ylab = "Quantity", col = "lightblue")
boxplot(retail$UnitPrice, main = "Boxplot Unit Price", ylab = "Unit Price", col = "lightblue")
iqr.quantity <- IQR(retail$Quantity)
q1.quantity <- quantile(retail$Quantity, 0.25)
q3.quantity <- quantile(retail$Quantity, 0.75)
lower_bound_quantity <- q1.quantity - 1.5 * iqr.quantity
upper_bound_quantity <- q3.quantity + 1.5 * iqr.quantity
retail <- retail[retail$Quantity >= lower_bound_quantity & retail$Quantity <= upper_bound_quantity, ]
View(retail)
rm(list=ls())
retail = read.csv('Online_Retail.csv',
sep=',',
na.strings=c('', 'N/A'),
stringsAsFactors=FALSE)
summary(retail)
retail.top3 <- head(retail, 3)
retail$CustomerID <- na.locf(retail$CustomerID)
retail <- retail[!duplicated(retail), ]
retail <- retail[retail$Quantity > 0, ]
retail <- retail[retail$UnitPrice > 0, ]
iqr.quantity <- IQR(retail$Quantity)
q1.quantity <- quantile(retail$Quantity, 0.25)
q3.quantity <- quantile(retail$Quantity, 0.75)
lower_bound_quantity <- q1.quantity - 1.5 * iqr.quantity
upper_bound_quantity <- q3.quantity + 1.5 * iqr.quantity
retail.preprocessed <- retail[retail$Quantity >= lower_bound_quantity & retail$Quantity <= upper_bound_quantity, ]
retail.preprocessed <- retail[retail$UnitPrice >= lower_bound_quantity & retail$UnitPrice <= upper_bound_quantity, ]
retail.preprocessed <- split(retail$Description,
retail$InvoiceNo)
retail.transformed <- as(retail.preprocessed, 'transactions')
frequent.itemsets <- apriori(retail.transformed,
parameter=list(
supp=0.02,
target='frequent itemsets'
))
inspect(frequent.itemsets)
rules <- apriori(retail.transformed,
parameter=list(
supp=0.02,
conf=0.6,
target='rules'))
inspect(rules)
library(zoo)
rm(list=ls())
retail = read.csv('Online_Retail.csv',
sep=',',
na.strings=c('', 'N/A'),
stringsAsFactors=FALSE)
retail$CustomerID <- na.locf(retail$CustomerID)
retail <- na.omit(retail)
retail <- retail[!duplicated(retail), ]
retail <- retail[retail$Quantity > 0, ]
retail <- retail[retail$UnitPrice > 0, ]
boxplot(retail$Quantity, main = "Boxplot Quantity", ylab = "Quantity", col = "lightblue")
boxplot(retail$UnitPrice, main = "Boxplot Unit Price", ylab = "Unit Price", col = "lightblue")
# Calculate bounds for UnitPrice (assuming you want to filter it similarly to Quantity)
iqr.unitprice <- IQR(retail$UnitPrice)
q1.unitprice <- quantile(retail$UnitPrice, 0.25)
q3.unitprice <- quantile(retail$UnitPrice, 0.75)
lower_bound_quantity <- q1.unitprice - 1.5 * iqr.unitprice
upper_bound_quantity <- q3.unitprice + 1.5 * iqr.unitprice
# Apply separate filtering for Quantity and UnitPrice
retail.preprocessed <- retail[retail$Quantity >= lower_bound_quantity & retail$Quantity <= upper_bound_quantity, ]
boxplot(retail.preprocessed$Quantity, main = "Boxplot Quantity", ylab = "Quantity", col = "lightblue")
retail.transformed <- split(retail.preprocessed$Description,
retail.preprocessed$InvoiceNo)
retail.transformed <- as(retail.preprocessed, 'transactions')
frequent.itemsets <- apriori(retail.transformed,
parameter=list(
supp=0.02,
target='frequent itemsets'
))
inspect(frequent.itemsets)
retail.transformed <- split(retail.preprocessed$Description,
retail.preprocessed$InvoiceNo)
retail.transformed <- as(retail.transformed, 'transactions')
frequent.itemsets <- apriori(retail.transformed,
parameter=list(
supp=0.02,
target='frequent itemsets'
))
inspect(frequent.itemsets)
rules <- apriori(retail.transformed,
parameter=list(
supp=0.02,
conf=0.6,
target='rules'))
inspect(rules)
sorted_rules <- sort(rules, by = "confidence", decreasing = TRUE)
# Inspect the sorted rules
inspect(sorted_rules)
sorted.itemsets <- sort(frequent.itemsets, by = "confidence", decreasing = TRUE)
inspect(frequent.itemsets)
sorted.itemsets <- subset(sorted.itemsets, size(frequent.itemsets) >= 2)
inspect(frequent.itemsets)
sorted.itemsets <- sort(frequent.itemsets, by = "confidence", decreasing = TRUE)
sorted.itemsets <- subset(sorted.itemsets, size(frequent.itemsets) >= 2)
frequent.itemsets <- apriori(retail.transformed,
parameter=list(
supp=0.02,
target='frequent itemsets'
))
sorted.itemsets <- sort(frequent.itemsets, by = "confidence", decreasing = TRUE)
inspect(sorted.itemsets)
rules <- apriori(retail.transformed,
parameter=list(
supp=0.02,
conf=0.6,
target='rules'))
sorted.rules <- sort(rules, by = "confidence", decreasing = TRUE)
inspect(sorted.rules)
inspect(sorted.itemsets)
sorted.itemsets <- sort(rules, by = "support", decreasing = TRUE)
inspect(sorted.itemsets)
sorted.itemsets <- sort(frequent.itemsets, by = "support", decreasing = TRUE)
inspect(sorted.itemsets)
sorted.itemsets <- subset(sorted.itemsets, size(sorted.itemsets) >= 2)
inspect(sorted.itemsets)
write.csv(sorted.itemsets.df, file = "frequent_itemsets.csv", row.names = FALSE)
sorted.itemsets.df <- as(sorted.itemsets, "data.frame")
write.csv(sorted.itemsets.df, file = "frequent_itemsets.csv", row.names = FALSE)
rules <- apriori(retail.transformed,
parameter=list(
supp=0.02,
conf=0.6,
target='rules'))
sorted.rules <- sort(rules, by = "confidence", decreasing = TRUE)
inspect(sorted.rules)
rules <- apriori(retail.transformed,
parameter=list(
supp=0.02,
conf=0.7,
target='rules'))
sorted.rules <- sort(rules, by = "confidence", decreasing = TRUE)
inspect(sorted.rules)
sorted.itemsets.df <- as(sorted.itemsets, "data.frame")
write.csv(sorted.itemsets.df, file = "frequent_itemsets.csv", row.names = FALSE)
rules <- apriori(retail.transformed,
parameter=list(
supp=0.02,
conf=0.6,
target='rules'))
sorted.rules <- sort(rules, by = "confidence", decreasing = TRUE)
inspect(sorted.rules)
sorted.rules <- sort(rules, by = "confidence", decreasing = TRUE)
inspect(sorted.rules)
rm(list=ls())
retail = read.csv('Online_Retail.csv',
sep=',',
na.strings=c('', 'N/A'),
stringsAsFactors=FALSE)
summary(retail)
retail.top5 <- head(retail, 5)
summary(retail)
retail$CustomerID <- na.locf(retail$CustomerID)
retail <- na.omit(retail)
retail <- retail[!duplicated(retail), ]
retail <- retail[retail$Quantity > 0, ]
retail <- retail[retail$UnitPrice > 0, ]
summary(retail)
# Calculate bounds for UnitPrice (assuming you want to filter it similarly to Quantity)
iqr.unitprice <- IQR(retail$UnitPrice)
q1.unitprice <- quantile(retail$UnitPrice, 0.25)
q3.unitprice <- quantile(retail$UnitPrice, 0.75)
lower_bound_quantity <- q1.unitprice - 1.5 * iqr.unitprice
upper_bound_quantity <- q3.unitprice + 1.5 * iqr.unitprice
# Apply separate filtering for Quantity and UnitPrice
retail.preprocessed <- retail[retail$Quantity >= lower_bound_quantity & retail$Quantity <= upper_bound_quantity, ]
boxplot(retail.preprocessed$Quantity, main = "Boxplot Quantity", ylab = "Quantity", col = "lightblue")
boxplot(retail.preprocessed$Quantity, main = "Boxplot Quantity", ylab = "Quantity", col = "lightblue")
# Apply separate filtering for Quantity and UnitPrice
retail.preprocessed <- retail[retail$Quantity >= lower_bound_quantity & retail$Quantity <= upper_bound_quantity, ]
boxplot(retail.preprocessed$Quantity, main = "Boxplot Quantity", ylab = "Quantity", col = "lightblue")
retail.over10000 <- retail[retail$Quantity > 10000, ]
retail.over10000
retail.over10000 <- retail[retail$Quantity > 1000, ]
retail.over10000 <- retail[retail$Quantity > 500, ]
retail.over10000
retail.over500 <- retail[retail$Quantity > 500, ]
rm('retail.over10000')
retail.transformed.over500 <- split(retail.over500$Description,
retail.over500$InvoiceNo)
retail.transformed.over500 <- as(retail.transformed.over500, 'transactions')
retail.transformed.over500 <- split(retail.over500$Description,
retail.over500$InvoiceNo)
retail.transformed.over500 <- as(retail.transformed.over500, 'transactions')
library(arules)
retail.transformed.over500 <- as(retail.transformed.over500, 'transactions')
sorted.itemsets.500 <- sort(frequent.itemsets.500, by = "support", decreasing = TRUE)
sorted.itemsets.500 <- subset(sorted.itemsets.500, size(sorted.itemsets.500) >= 2)
inspect(sorted.itemsets.500)
inspect(sorted.itemsets.500)
frequent.itemsets.500 <- apriori(retail.transformed.over500,
parameter=list(
supp=0.02,
target='frequent itemsets'
))
inspect(sorted.itemsets.500)
frequent.itemsets.500
inspect(frequent.itemsets.500)
retail.over500 <- retail[retail$Quantity > 100, ]
retail.over500
retail.over100
retail.over100 <- retail[retail$Quantity > 100, ]
retail.over100 <- retail[retail$Quantity > 100, ]
retail.transformed.over100 <- split(retail.over100$Description,
retail.over100$InvoiceNo)
retail.transformed.over100 <- as(retail.transformed.over100, 'transactions')
frequent.itemsets.100 <- apriori(retail.transformed.over100,
parameter=list(
supp=0.02,
target='frequent itemsets'
))
inspect(frequent.itemsets.500)
# Perform ECLAT for finding frequent itemsets
frequent.itemsets.eclat <- eclat(retail.transformed,
parameter = list(supp = 0.02, maxlen = 10))
retail.transformed <- split(retail.preprocessed$Description,
retail.preprocessed$InvoiceNo)
retail.transformed <- as(retail.transformed, 'transactions')
frequent.itemsets <- apriori(retail.transformed,
parameter=list(
supp=0.02,
target='frequent itemsets'
))
sorted.itemsets <- sort(frequent.itemsets, by = "support", decreasing = TRUE)
sorted.itemsets <- subset(sorted.itemsets, size(sorted.itemsets) >= 2)
inspect(sorted.itemsets)
sorted.itemsets.df <- as(sorted.itemsets, "data.frame")
write.csv(sorted.itemsets.df, file = "frequent_itemsets.csv", row.names = FALSE)
rules <- apriori(retail.transformed,
parameter=list(
supp=0.02,
conf=0.6,
target='rules'))
sorted.rules <- sort(rules, by = "confidence", decreasing = TRUE)
inspect(sorted.rules)
# Perform ECLAT for finding frequent itemsets
frequent.itemsets.eclat <- eclat(retail.transformed,
parameter = list(supp = 0.02, maxlen = 10))
# Sort the itemsets by support in descending order
sorted.itemsets.eclat <- sort(frequent.itemsets.eclat, by = "support", decreasing = TRUE)
# Inspect the top frequent itemsets
inspect(sorted.itemsets.eclat)
rm(list=ls())
retail = read.csv('Online_Retail.csv',
sep=',',
na.strings=c('', 'N/A'),
stringsAsFactors=FALSE)
retail$CustomerID <- na.locf(retail$CustomerID)
retail <- na.omit(retail)
retail <- retail[!duplicated(retail), ]
retail <- retail[retail$Quantity > 0, ]
retail <- retail[retail$UnitPrice > 0, ]
# Calculate bounds for UnitPrice (assuming you want to filter it similarly to Quantity)
iqr.unitprice <- IQR(retail$UnitPrice)
q1.unitprice <- quantile(retail$UnitPrice, 0.25)
q3.unitprice <- quantile(retail$UnitPrice, 0.75)
lower_bound_quantity <- q1.unitprice - 1.5 * iqr.unitprice
upper_bound_quantity <- q3.unitprice + 1.5 * iqr.unitprice
# Apply separate filtering for Quantity and UnitPrice
retail.preprocessed <- retail[retail$Quantity >= lower_bound_quantity & retail$Quantity <= upper_bound_quantity, ]
retail.transformed <- split(retail.preprocessed$Description,
retail.preprocessed$InvoiceNo)
retail.transformed <- as(retail.transformed, 'transactions')
frequent.itemsets <- apriori(retail.transformed,
parameter=list(
supp=0.02,
target='frequent itemsets'
))
sorted.itemsets <- sort(frequent.itemsets, by = "support", decreasing = TRUE)
sorted.itemsets <- subset(sorted.itemsets, size(sorted.itemsets) >= 2)
inspect(sorted.itemsets)
rm(list=ls())
retail = read.csv('Online_Retail.csv',
sep=',',
na.strings=c('', 'N/A'),
stringsAsFactors=FALSE)
retail$CustomerID <- na.locf(retail$CustomerID)
library(zoo)
library('arules')
library('zoo')
retail$CustomerID <- na.locf(retail$CustomerID)
retail <- na.omit(retail)
retail <- retail[!duplicated(retail), ]
retail <- retail[retail$Quantity > 0, ]
retail <- retail[retail$UnitPrice > 0, ]
# Calculate bounds for UnitPrice (assuming you want to filter it similarly to Quantity)
iqr.unitprice <- IQR(retail$UnitPrice)
q1.unitprice <- quantile(retail$UnitPrice, 0.25)
q3.unitprice <- quantile(retail$UnitPrice, 0.75)
lower_bound_quantity <- q1.unitprice - 1.5 * iqr.unitprice
upper_bound_quantity <- q3.unitprice + 1.5 * iqr.unitprice
retail <- retail[!duplicated(retail), ]
retail <- retail[retail$Quantity > 0, ]
retail <- retail[retail$UnitPrice > 0, ]
# Apply separate filtering for Quantity and UnitPrice
retail.preprocessed <- retail[retail$Quantity >= lower_bound_quantity & retail$Quantity <= upper_bound_quantity, ]
retail.transformed <- split(retail.preprocessed$Description,
retail.preprocessed$InvoiceNo)
retail.transformed <- as(retail.transformed, 'transactions')
frequent.itemsets <- apriori(retail.transformed,
parameter=list(
supp=0.02,
target='frequent itemsets'
))
sorted.itemsets <- sort(frequent.itemsets, by = "support", decreasing = TRUE)
sorted.itemsets <- subset(sorted.itemsets, size(sorted.itemsets) >= 2)
inspect(sorted.itemsets)
rules <- apriori(retail.transformed,
parameter=list(
supp=0.02,
conf=0.6,
target='rules'))
sorted.rules <- sort(rules, by = "confidence", decreasing = TRUE)
inspect(sorted.rules)
rules <- apriori(retail.transformed,
parameter=list(
supp=0.02,
conf=0.6,
target='rules'))
sorted.rules <- sort(rules, by = "confidence", decreasing = TRUE)
inspect(sorted.rules)
# Perform ECLAT for finding frequent itemsets
frequent.itemsets.eclat <- eclat(retail.transformed,
parameter=list(supp = 0.02,
maxlen = 10
))
sorted.itemsets.eclat <- sort(frequent.itemsets.eclat, by = "support", decreasing = TRUE)
inspect(sorted.itemsets.eclat)
rules.eclat <- ruleInduction(sorted.itemsets.eclat,
retail.transformed,
confidence = 0.6)
sorted.rules.eclat <- sort(rules.eclat, by = "confidence", decreasing = TRUE)
inspect(sorted.rules.eclat)
write(retail.transformed, file='online_retail.csv', sep=',')
retail = read.csv('Online_Retail.csv',
sep=',',
na.strings=c('', 'N/A'),
stringsAsFactors=FALSE)
write(retail.transformed, file='FP_growth.csv', sep=',')
system('cmd', input ='fpgrowth -s5 -k, FP_growth.csv, frequent_items.csv')
View(frequent.itemsets.eclat)
View(frequent.itemsets)
system('cmd', input ='fpgrowth -s5 -k, FP_growth.csv, frequent_items.csv')
java -jar spmf.jar run FPGrowth_itemsets FP_growth.txt frequent_items.txt 0.05
# Generate classification association rules
rules.carma <- cba(retail.transformed, supp = 0.02, conf = 0.6)
install.packages('arulesCBA')
library(arulesCBA)
# Generate classification association rules
rules.carma <- cba(retail.transformed, supp = 0.02, conf = 0.6)
# Generate classification association rules
rules.carma <- cba(retail.transformed, supp = 0.02, conf = 0.6)
# Inspect the rules
inspect(rules.carma)
rules.eclat <- ruleInduction(sorted.itemsets.eclat,
retail.transformed,
confidence = 0.6)
sorted.rules.eclat <- sort(rules.eclat, by = "confidence", decreasing = TRUE)
inspect(sorted.rules.eclat)
write(retail.transformed, file='FP_growth.csv', sep=',')
system('cmd', input ='fpgrowth -s5 -k, FP_growth.csv, frequent_items.csv')
rules.eclat <- ruleInduction(sorted.itemsets.eclat,
retail.transformed,
confidence = 0.6)
sorted.rules.eclat <- sort(rules.eclat, by = "confidence", decreasing = TRUE)
inspect(sorted.rules.eclat)
library('arulesCBA')
library('arules')
library('zoo')
frequent.itemsets.fp <- fpgrowth(retail.transformed,
parameter = list(supp = 0.02,
maxlen = 10))
install.packages('rCBA')
library('rCBA')
frequent.itemsets.fp <- fpgrowth(retail.transformed,
parameter = list(supp = 0.02,
maxlen = 10))
frequent.itemsets.fp <- fpgrowth(retail.transformed,
support = 0.02,
maxLength = 10)
sorted.itemsets.fp <- sort(frequent.itemsets.fp, by = "support", decreasing = TRUE)
inspect(sorted.itemsets.fp)
frequent.itemsets.fp <- fpgrowth(retail.transformed,
support = 0.02,
maxLength = 10)
sorted.itemsets.fp <- sort(frequent.itemsets.fp, by = "support", decreasing = TRUE)
inspect(sorted.itemsets.fp)
frequent.itemsets.fp <- fpgrowth(retail.transformed,
support = 0.02,
confidence = 0.6)
# FP-Growth Algorithm
write(retail.transformed, file='data.csv', sep=',')
system('cmd', input='fpgrowth')
library('zoo')
library('arulesCBA')
library('arules')
library('rCBA')
library('rCBA')
install.packages('rJava')
install.packages("rJava")
'
library('rCBA')
library('rCBA')
system('cmd', input='fpgrowth')
# FP-Growth Algorithm
frequent.itemsets.fp <- fpgrowth(retail.transformed,
support = 0.02,
confidence = 0.6)
# ECLAT Algorithm
frequent.itemsets.eclat <- eclat(retail.transformed,
parameter=list(supp = 0.02,
maxlen = 10
))
sorted.itemsets.eclat <- sort(frequent.itemsets.eclat, by = "support", decreasing = TRUE)
inspect(sorted.itemsets.eclat)
rules.eclat <- ruleInduction(sorted.itemsets.eclat,
retail.transformed,
confidence = 0.6)
sorted.rules.eclat <- sort(rules.eclat, by = "confidence", decreasing = TRUE)
inspect(sorted.rules.eclat)
# ECLAT Algorithm
frequent.itemsets.eclat <- eclat(retail.transformed,
parameter=list(supp = 0.02,
maxlen = 10
))
sorted.itemsets.eclat <- sort(frequent.itemsets.eclat, by = "support", decreasing = TRUE)
inspect(sorted.itemsets.eclat)
rules <- apriori(retail.transformed,
parameter=list(
supp=0.02,
conf=0.6,
target='rules'))
sorted.rules <- sort(rules, by = "confidence", decreasing = TRUE)
inspect(sorted.rules)
inspect(sorted.rules.eclat)
# FP-Growth Algorithm
fpgrowth.itemsets <- fpgrowth(retail.transformed,
parameter=list(
supp=0.02,
target='frequent itemsets'
))
# FP-Growth Algorithm
fp_growth_itemsets <- fpgrowth(retail_transformed,
supp = 0.02,
target = "frequent itemsets")
# FP-Growth Algorithm
fp_growth_itemsets <- fpgrowth(retail_transformed,
supp = 0.02)
# FP-Growth Algorithm
fp_growth_itemsets <- fpgrowth(retail.transformed,
supp = 0.02)
# FP-Growth Algorithm
fp_growth_itemsets <- fpgrowth(retail.transformed,
parameter = list(supp = 0.02))
# FP-Growth Algorithm
fp_growth_itemsets <- fpgrowth(retail.transformed,
parameter = list(supp = 0.02))
# FP-Growth Algorithm
fp_growth_itemsets <- fpgrowth(retail.transformed,
support = 0.02,
target = "frequent itemsets")
# FP-Growth Algorithm
fp_growth_itemsets <- fpgrowth(retail.transformed,
support = 0.02,
)
frequent.itemsets.fp <- apriori(retail.transformed,
parameter = list(supp = 0.02,
target = 'frequent itemsets',
algorithm = 'fpgrowth'))
rules.fp <- apriori(retail.transformed,
parameter = list(supp = 0.02,
conf = 0.6,
target = 'rules',
algorithm = 'fpgrowth'))
inspect(rules.fp)
frequent.itemsets.fp <- apriori(retail.transformed,
parameter = list(supp = 0.02,
target = 'frequent itemsets',
algorithm = 'fpgrowth'))
# FP-Growth Algorithm
frequent_itemsets_fp <- apriori(retail_transformed,
parameter = list(supp = 0.02,
target = "frequent itemsets"))
# FP-Growth Algorithm
frequent_itemsets_fp <- apriori(retail.transformed,
parameter = list(supp = 0.02,
target = "frequent itemsets"))
system('cmd', input='fpgrowth -s02 -k, data.csv frequent_itemsets.csv')
install.packages('zoo')
install.packages('arulesCBA')
install.packages('rCBA')
install.packages('rJava')
library('zoo')
library('arulesCBA')
library('arules')
library('rCBA')
